---
version: 2.1

jobs:
  build:
    machine:
      # https://circleci.com/developer/machine/image/ubuntu-2204
      image: ubuntu-2204:2022.10.2
    steps:
      - checkout
      - restore_cache:
          keys:
            - my_cache
      - run:
          name: Get test data
          command: |
            if [[ ! -d ~/data/ds003_downsampled ]]; then
                wget -c --no-check-certificate -O ${HOME}/ds003_downsampled_v2.tar "https://osf.io/8s29u/download" && \
                mkdir -p ${HOME}/data && \
                tar xf ${HOME}/ds003_downsampled_v2.tar -C ${HOME}/data;
            fi
      - run:
          name: Build Docker image
          command: |
            wget https://raw.githubusercontent.com/bids-apps/maintenance-tools/main/circleci/build_docker.sh
            bash build_docker.sh
      - save_cache:
          key: my_cache
          paths:
            - ~/docker
            - ~/data
      - persist_to_workspace:
          root: /home/circleci
          paths:
            - data/ds003_downsampled_v2
            - docker/image.tar

  test:
    machine:
      image: ubuntu-2204:2022.10.2

    parameters:
      participant:
        type: string

    steps:
      - attach_workspace:
          at: /tmp/workspace

      - run: docker load -i /tmp/workspace/image.tar

      - run: mkdir -p ${HOME}/outputs-colin
      - run: mkdir -p ${HOME}/outputs-colin-labelmask

      - run:
          name: print version
          command: |
            docker run -ti --rm --read-only \
              /tmp/workspace/data/ds003_downsampled:/bids_dataset \
                bids/${CIRCLE_PROJECT_REPONAME,,} --version

      - run:
          name: template level run for downsampled dataset no masking
          command: |
            docker run -ti --rm --read-only \
              /tmp/workspace/data/ds003_downsampled:/bids_dataset \
              -v ${HOME}/outputs-colin:/outputs \
              bids/${CIRCLE_PROJECT_REPONAME,,} \
              --n_cpus 2 --segmentation_type colin27-subcortical \
              /bids_dataset /outputs participant1 --participant_label << parameters.participant >>
          no_output_timeout: 6h

      - run:
          name: participant level tests for a longitudinal dataset no masking
          command: |
            docker run -ti --rm --read-only \
              /tmp/workspace/data/ds003_downsampled:/bids_dataset \
              -v ${HOME}/outputs-colin:/outputs \
              bids/${CIRCLE_PROJECT_REPONAME,,} \
              --n_cpus 2 --segmentation_type colin27-subcortical \
              /bids_dataset /outputs participant2 --participant_label << parameters.participant >>
          no_output_timeout: 6h

      - run:
          name: template level run for downsampled dataset with masking
          command: |
            docker run -ti --rm --read-only \
              /tmp/workspace/data/ds003_downsampled:/bids_dataset \
              -v ${HOME}/outputs-colin-labelmask:/outputs \
              bids/${CIRCLE_PROJECT_REPONAME,,} \
              --n_cpus 2 --label-masking --segmentation_type colin27-subcortical \
              /bids_dataset /outputs participant1 --participant_label << parameters.participant >>
          no_output_timeout: 6h

      - run:
          name: participant level tests for a longitudinal dataset with masking
          command: |
            docker run -ti --rm --read-only \
              /tmp/workspace/data/ds003_downsampled:/bids_dataset \
              -v ${HOME}/outputs-colin-labelmask:/outputs \
              bids/${CIRCLE_PROJECT_REPONAME,,} \
              --n_cpus 2 --label-masking --segmentation_type colin27-subcortical \
              /bids_dataset /outputs participant2 --participant_label << parameters.participant >>
          no_output_timeout: 6h

  deploy:
    machine:
      image: ubuntu-2204:2022.10.2
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run: docker load -i /tmp/workspace/docker/image.tar
      - run:
          name: push to dockerhub
          command: |
            wget https://raw.githubusercontent.com/bids-apps/maintenance-tools/main/circleci/push_docker.sh
            bash push_docker.sh

workflows:
  build-test-deploy:
    jobs:
      - build
      - test:
          requires:
            - build
          matrix:
            parameters:
              participant: ["01", "02"]
      - deploy:
          requires:
            - test
          filters:
            tags:
              only: /.*/
